/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');

const ListItem1 = require("../../components/ListItem1");
const HorizontalDivider = require("../../components/HorizontalDivider");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const ItemPerformance = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const flexlayout309Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 45,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		});
		var flexlayout309 = new ListItem1(flexlayout309Style, "itemPerformance");
		this.addChild(flexlayout309);
		
		const dividerperfStyle = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var dividerperf = new HorizontalDivider(dividerperfStyle, "itemPerformance");
		this.addChild(dividerperf);
		
		const flexlayout309_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 45,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		});
		var flexlayout309_1 = new ListItem1(flexlayout309_1Style, "itemPerformance");
		this.addChild(flexlayout309_1);
		
		const dividerperf_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var dividerperf_1 = new HorizontalDivider(dividerperf_1Style, "itemPerformance");
		this.addChild(dividerperf_1);
		
		const flexlayout309_1_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 45,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		});
		var flexlayout309_1_1 = new ListItem1(flexlayout309_1_1Style, "itemPerformance");
		this.addChild(flexlayout309_1_1);
		
		const dividerperf_1_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var dividerperf_1_1 = new HorizontalDivider(dividerperf_1_1Style, "itemPerformance");
		this.addChild(dividerperf_1_1);
		
		const flexlayout309_1_1_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 45,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			alignItems: FlexLayout.AlignItems.CENTER
		});
		var flexlayout309_1_1_1 = new ListItem1(flexlayout309_1_1_1Style, "itemPerformance");
		this.addChild(flexlayout309_1_1_1);
		
		//assign the children to itemPerformance 
		this.children = Object.assign({}, {
			flexlayout309: flexlayout309,
			dividerperf: dividerperf,
			flexlayout309_1: flexlayout309_1,
			dividerperf_1: dividerperf_1,
			flexlayout309_1_1: flexlayout309_1_1,
			dividerperf_1_1: dividerperf_1_1,
			flexlayout309_1_1_1: flexlayout309_1_1_1
		});
		
	});

ItemPerformance.defaults = getCombinedStyle(".flexLayout", {
	width: 309,
	height: 195,
	backgroundColor: Color.create(0, 255, 255, 255),
	paddingBottom: 10
});

module && (module.exports = ItemPerformance);