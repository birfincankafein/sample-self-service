/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const ImageView = require('sf-core/ui/imageview');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Image = require('sf-core/ui/image');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');

const HorizontalDivider = require("../../components/HorizontalDivider");
const VerticalDivider = require("../../components/VerticalDivider");
const ListItem1 = require("../../components/ListItem1");

const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const ItemLeaveManagement = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const dataContainerStyle = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var dataContainer = new FlexLayout(dataContainerStyle);
		this.addChild(dataContainer);
		
		const dividerStyle = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: null,
			height: 1,
			backgroundColor: Color.create(255, 255, 255, 255),
			alpha: 1,
			flexGrow: null,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var divider = new HorizontalDivider(dividerStyle, "itemLeaveManagement");
		this.addChild(divider);
		
		const approveContainerStyle = getCombinedStyle(".flexLayout", {
			height: 50,
			width: null,
			backgroundColor: Color.create(255, 255, 255, 255),
			paddingLeft: 10,
			paddingRight: 10,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var approveContainer = new FlexLayout(approveContainerStyle);
		this.addChild(approveContainer);
		
		const cont1Style = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			alignItems: FlexLayout.AlignItems.CENTER,
			justifyContent: FlexLayout.JustifyContent.CENTER,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var cont1 = new FlexLayout(cont1Style);
		approveContainer.addChild(cont1);
		
		const flexlayout1Style = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			flexGrow: 1
		});
		var flexlayout1 = new FlexLayout(flexlayout1Style);
		dataContainer.addChild(flexlayout1);
		
		const flexlayout2Style = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			flexGrow: 2
		});
		var flexlayout2 = new FlexLayout(flexlayout2Style);
		dataContainer.addChild(flexlayout2);
		
		const flexlayout10Style = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(255, 151, 151, 151),
			alpha: 0.4,
			left: 0,
			top: 0,
			width: 1,
			height: null,
			marginTop: 10,
			marginBottom: 10,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flexlayout10 = new VerticalDivider(flexlayout10Style, "itemLeaveManagement");
		approveContainer.addChild(flexlayout10);
		
		const cont2Style = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			alignItems: FlexLayout.AlignItems.CENTER,
			justifyContent: FlexLayout.JustifyContent.CENTER,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var cont2 = new FlexLayout(cont2Style);
		approveContainer.addChild(cont2);
		
		const flexlayout10_1Style = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(255, 151, 151, 151),
			alpha: 0.4,
			left: 0,
			top: 0,
			width: 1,
			height: null,
			marginTop: 10,
			marginBottom: 10,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flexlayout10_1 = new VerticalDivider(flexlayout10_1Style, "itemLeaveManagement");
		approveContainer.addChild(flexlayout10_1);
		
		const cont3Style = getCombinedStyle(".flexLayout", {
			height: null,
			width: null,
			alignItems: FlexLayout.AlignItems.CENTER,
			justifyContent: FlexLayout.JustifyContent.CENTER,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW
		});
		var cont3 = new FlexLayout(cont3Style);
		approveContainer.addChild(cont3);
		
		const imageview1_1Style = getCombinedStyle(".imageView", {
			height: 20,
			width: 20,
			imageFillType: ImageFillType.ASPECTFIT,
			image: Image.createFromFile("images://icon_edit_active.png")
		});
		var imageview1_1 = new ImageView(imageview1_1Style);
		cont2.addChild(imageview1_1);
		
		const label205Style = getCombinedStyle(".label .label-list-item-header", {
			height: null,
			width: null,
			textAlignment: TextAlignment.BOTTOMCENTER,
			text: "3",
			flexGrow: 1,
			font: Font.create("Arial", 22, Font.BOLD)
		});
		var label205 = new Label(label205Style);
		flexlayout1.addChild(label205);
		
		const imageview1Style = getCombinedStyle(".imageView", {
			height: 20,
			width: 20,
			imageFillType: ImageFillType.ASPECTFIT,
			image: Image.createFromFile("images://icon_approve_active.png")
		});
		var imageview1 = new ImageView(imageview1Style);
		cont1.addChild(imageview1);
		
		const imageview1_1_1Style = getCombinedStyle(".imageView", {
			height: 20,
			width: 20,
			imageFillType: ImageFillType.ASPECTFIT,
			image: Image.createFromFile("images://icon_delete.png")
		});
		var imageview1_1_1 = new ImageView(imageview1_1_1Style);
		cont3.addChild(imageview1_1_1);
		
		const flexlayout3Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: 210,
			height: null,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1
		});
		var flexlayout3 = new ListItem1(flexlayout3Style, "itemLeaveManagement");
		flexlayout2.addChild(flexlayout3);
		
		const label414_1_1Style = getCombinedStyle(".label .label-delete-item-active", {
			height: 30,
			width: null,
			marginLeft: 5,
			minWidth: 40,
			text: "Delete"
		});
		var label414_1_1 = new Label(label414_1_1Style);
		cont3.addChild(label414_1_1);
		
		const label205_1Style = getCombinedStyle(".label .label-list-item-header", {
			height: null,
			width: null,
			textAlignment: TextAlignment.MIDCENTER,
			text: "Days",
			flexGrow: 1,
			font: Font.create("Arial", 18, Font.NORMAL)
		});
		var label205_1 = new Label(label205_1Style);
		flexlayout1.addChild(label205_1);
		
		const label414_1Style = getCombinedStyle(".label .label-edit-item-active", {
			height: 30,
			width: null,
			marginLeft: 5,
			minWidth: 30,
			text: "Edit"
		});
		var label414_1 = new Label(label414_1Style);
		cont2.addChild(label414_1);
		
		const label414Style = getCombinedStyle(".label .label-approve-item-active", {
			height: 30,
			width: null,
			marginLeft: 5,
			minWidth: 50,
			text: "Approve",
			maxWidth: 100,
			flexGrow: null
		});
		var label414 = new Label(label414Style);
		cont1.addChild(label414);
		
		const flexlayout3_1Style = getCombinedStyle(".flexLayout", {
			left: 0,
			top: 0,
			width: 210,
			height: null,
			backgroundColor: Color.create(255, 255, 255, 255),
			flexDirection: FlexLayout.FlexDirection.ROW,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1
		});
		var flexlayout3_1 = new ListItem1(flexlayout3_1Style, "itemLeaveManagement");
		flexlayout2.addChild(flexlayout3_1);
		
		//assign the children to itemLeaveManagement 
		this.children = Object.assign({}, {
			dataContainer: dataContainer,
			divider: divider,
			approveContainer: approveContainer
		});
		
		//assign the children of dataContainer
		dataContainer.children = Object.assign({}, {
			flexlayout1: flexlayout1,
			flexlayout2: flexlayout2
		});
		
		//assign the children of approveContainer
		approveContainer.children = Object.assign({}, {
			cont1: cont1,
			flexlayout10: flexlayout10,
			cont2: cont2,
			flexlayout10_1: flexlayout10_1,
			cont3: cont3
		});
		
		//assign the children of cont1
		cont1.children = Object.assign({}, {
			imageview1: imageview1,
			label414: label414
		});
		
		//assign the children of flexlayout1
		flexlayout1.children = Object.assign({}, {
			label205: label205,
			label205_1: label205_1
		});
		
		//assign the children of flexlayout2
		flexlayout2.children = Object.assign({}, {
			flexlayout3: flexlayout3,
			flexlayout3_1: flexlayout3_1
		});
		
		//assign the children of cont2
		cont2.children = Object.assign({}, {
			imageview1_1: imageview1_1,
			label414_1: label414_1
		});
		
		//assign the children of cont3
		cont3.children = Object.assign({}, {
			imageview1_1_1: imageview1_1_1,
			label414_1_1: label414_1_1
		});
		
	});

ItemLeaveManagement.defaults = getCombinedStyle(".flexLayout", {
	width: 350,
	height: 124,
	backgroundColor: Color.create(0, 255, 255, 255),
	paddingBottom: 10,
	flexGrow: 1,
	positionType: FlexLayout.PositionType.RELATIVE
});

module && (module.exports = ItemLeaveManagement);